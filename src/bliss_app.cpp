#include "build_info.h" //Generated by cmake using buildInfo.h.in template

#include "bliss_app.h"
#include "log_router.h"
#include "perf_timer.h"
#include "entity_manager.h"
#include "entity_memory_pool.h"
#include "entity.h"
#include "components.h"

Bliss_App::Bliss_App() : dev_ui(Dev_UI::instance())
{
    log_router_enable();
}

void Bliss_App::run()
{
    TraceLog(LOG_INFO, "Starting " BLISS_FULL_HEADER "...\n");
    InitWindow(screen_width, screen_height, BLISS_FULL_HEADER);

    dev_ui.init();

    TraceLog(LOG_INFO, "Loading fonts");
    load_fonts();

    TraceLog(LOG_INFO, "Loading textures");
    load_textures();

    // raylib set fps
    SetTargetFPS(144);

    TraceLog(LOG_INFO, "Initializing sim");
    Entity_Manager& man = Entity_Manager::instance();
    //BUG: Adding and removing this entity causes one test santa to move twice as fast
    //Entity e = man.add_entity("Player");
    //C_Position& p_pos = e.add_component<C_Position>();
    //e.remove_component<C_Position>();
    //auto has = e.has_component<C_Position>();
    //TraceLog(LOG_INFO, has ? "true" : "false");

    //C_Position& pos = e.add_component<C_Position>();
    //pos.x = 400;
    //pos.y = 400;

    //man.remove_entity(e);
    //man.update_manager();

    for (size_t i = 0; i < MAX_ENTITIES; i++)
    {
        Entity e = man.add_entity("Hur_dur");
        C_Position& pos = e.add_component<C_Position>();
        pos.x = 400;
        pos.y = 400;
    }

    TraceLog(LOG_INFO, "Starting sim loop");
    while (!exit_window)
    {
        handle_input();
        simulation_step();
        draw_scene();
        draw_dev_ui();

        render_dev_ui();
        render_scene();

        man.update_manager();

        //Update metrics plot
        dev_ui.plot.UpdateAxes();
    }

    CloseWindow();
}

void Bliss_App::render_dev_ui()
{
    Perf_Timer t(dev_ui.metrics.dev_ui_render_time);
    dev_ui.render();
}

void Bliss_App::render_scene()
{
    Perf_Timer t(dev_ui.metrics.drawing_time);
    EndDrawing();
}

void Bliss_App::draw_dev_ui()
{
    //----------------------------------------------------------------------------------
    //Dev UI
    Perf_Timer t(dev_ui.metrics.dev_ui_time);

    dev_ui.new_frame();
    dev_ui.draw();

    ImVec2 vec2_zero = { 0.0f, 0.0f };
    ImVec2 vec2_one  = { 1.0f, 1.0f };
    ImVec4 vec4_zero = { 0.0f, 0.0f, 0.0f, 0.0f };
    ImVec4 vec4_one  = { 1.0f, 1.0f, 1.0f, 1.0f };
    ImVec2 size;
    size.x = (float)santa_tex.width  / 4.0f;
    size.y = (float)santa_tex.height / 4.0f;
    if (ImGui::Begin("santa img", nullptr, 0))
    {
        ImGui::Image((ImTextureID)&santa_tex, size, vec2_zero, vec2_one, vec4_one, vec4_zero);
    }
    ImGui::End();

    log_gui.draw("Log");
}

void Bliss_App::draw_scene()
{
    // Draw prep
    //----------------------------------------------------------------------------------
    Perf_Timer t(dev_ui.metrics.draw_prep_time);
    BeginDrawing();

    Entity_Manager& man = Entity_Manager::instance();

    ClearBackground(WHITE);

    DrawTexture(santa_tex,
        screen_width  / 2 - santa_tex.width  / 2,
        screen_height / 2 - santa_tex.height / 2, WHITE);

    for (Entity e : man.get_entities())
    {
        C_Position& pos = e.get_component<C_Position>();
        DrawTexture(santa_sm_tex, (int)pos.x, (int)pos.y, WHITE);
    }

    Vector2 text_dim = MeasureTextEx(font_roboto_mono, BLISS_FULL_HEADER,
        (float)font_roboto_mono.baseSize, 0);
    Vector2 text_pos{
       .x = ((float)screen_width  - text_dim.x) / 2.0f,
       .y = ((float)screen_height - text_dim.y) / 2.0f
    };
    //text_pos.x = ((float)screen_width  - text_dim.x) / 2.0f;
    //text_pos.y = ((float)screen_height - text_dim.y) / 2.0f;

    DrawTextEx(font_roboto_mono, BLISS_FULL_HEADER, text_pos,
        (float)font_roboto_mono.baseSize, 0, DARKGRAY);
}

void Bliss_App::simulation_step()
{
    //Simulation
    //----------------------------------------------------------------------------------
    Perf_Timer t(dev_ui.metrics.simulation_time);
    // simulate go here
}

void Bliss_App::handle_input()
{
    //Input handling
    //----------------------------------------------------------------------------------
    //Note: Input is actually polled inside raylib's EndDrawing (after frame
    //      waiting is finished! so effectively its as good as doing right
    //      before this point)
    Perf_Timer t(dev_ui.metrics.input_time);
    Entity_Manager& man = Entity_Manager::instance();
    exit_window = WindowShouldClose();

    for (Entity e : man.get_entities())
    {
        C_Position& pos = e.get_component<C_Position>();
        if (IsKeyDown(KEY_A))
        {
            pos.x -= 10;
        }
        if (IsKeyDown(KEY_D))
        {
            pos.x += 10;
        }
        if (IsKeyDown(KEY_W))
        {
            pos.y -= 10;
        }
        if (IsKeyDown(KEY_S))
        {
            pos.y += 10;
        }
    }

    if (IsKeyPressed(KEY_E)) {
        TraceLog(LOG_INFO, "hi");
    }

    if (!dev_ui.ig_io->WantCaptureMouse)
    {
        //only take mouse input in the game if imgui isn't catching it
        //clicks and input shouldn't go through a window
    }
    if (!dev_ui.ig_io->WantCaptureKeyboard)
    {
        //check keyboard inputs
    }
    if (!dev_ui.ig_io->WantTextInput)
    {
        //for on mobile & consoles
    }
}

void Bliss_App::load_fonts() {
    font_roboto_mono =    LoadFontEx("resources/fonts/RobotoMono-Regular.ttf",   28, nullptr, 255);
    font_roboto_mono_sm = LoadFontEx("resources/fonts/RobotoMono-Regular.ttf",   12, nullptr, 255);
    font =                LoadFontEx("resources/fonts/Merriweather-Regular.ttf", 14, nullptr, 255);
}

void Bliss_App::load_textures() {
    santa_tex = LoadTexture("resources/santa/Idle (1).png");
    santa_sm_tex = LoadTexture("resources/santa/Idle (1) - Cropped - Small.png");
    santa_cropped_tex = LoadTexture("resources/santa/Idle (1) - Cropped.png");
}

Bliss_App::~Bliss_App()
{
    TraceLog(LOG_INFO, "Unloading fonts...");
    UnloadFont(font_roboto_mono);
    UnloadFont(font_roboto_mono_sm);
    UnloadFont(font);

    TraceLog(LOG_INFO, "Unloading textures...");
    UnloadTexture(santa_tex);
}
